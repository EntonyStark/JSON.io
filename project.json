{
  "navigation" : [
    {
        "Title": "Html5",
        "Src": "http://ksrm-ic.in/wp-content/uploads/2017/02/HTML5-200x200.png",
        "Description": [
          {"someText" : "HTML5 (англ. HyperText Markup Language, version 5) — язык для структурирования и представления содержимого всемирной паутины. Это пятая версия HTML. Хотя стандарт был завершён (рекомендованная версия к использованию) только в 2014 году (предыдущая, четвёртая, версия опубликована в 1999 году), ещё с 2013 года браузерами оперативно осуществлялась поддержка, а разработчиками — использование рабочего стандарта (англ. HTML Living Standard). Цель разработки HTML5 — улучшение уровня поддержки мультимедиа-технологий с одновременным сохранением обратной совместимости, удобочитаемости кода для человека и простоты анализа для парсеров."},
          {"someText" : "Во всемирной паутине долгое время использовались стандарты HTML 4.01, XHTML 1.0 и XHTML 1.1. Веб-страницы на практике оказывались свёрстаны с использованием смеси особенностей, представленных различными спецификациями, включая спецификации программных продуктов, например веб-браузеров, а также сложившихся общеупотребительных приёмов. HTML5 был создан как единый язык разметки, который мог бы сочетать синтаксические нормы HTML и XHTML. Он расширяет, улучшает и рационализирует разметку документов, а также добавляет единый API для сложных веб-приложений."},
          {"someText" : "В HTML5 реализовано множество новых синтаксических особенностей. Например, элементы <video>, <audio> и <canvas>, а также возможность использования SVG и математических формул. Эти новшества разработаны для упрощения создания и управления графическими и мультимедийными объектами в сети без необходимости использования сторонних API и плагинов."},
          {"someText" : "Другие новые элементы, такие как <section>, <article>, <header> и <nav>, разработаны для того, чтобы обогащать семантическое содержимое документа (страницы). Новые атрибуты были введены с той же целью, хотя ряд элементов и атрибутов был удалён. Некоторые элементы, например <a>, <menu> и <cite>, были изменены, переопределены или стандартизированы. API и DOM стали основными частями спецификации HTML5. HTML5 также определяет некоторые особенности обработки ошибок вёрстки, поэтому синтаксические ошибки должны рассматриваться одинаково всеми совместимыми браузерами."},
          {"someText" : "HTML5 является эволюционным развитием HTML4.01 с сохранением обратной совместимости и добавлением новых возможностей (W3C)/(WHATWG). Конкурирующий стандарт XHTML2.0, который так и не был окончательно принят, предполагал более значительные изменения.Параллельно с W3C развитием HTML5 занимается и WHATWG. Причём с 2004 года WHATWG, а с 2007 W3C, у которой до этого приоритетом был стандарт XHTML2.0. В качестве стандарта W3C HTML5 был принят 28 октября 2014 года, а W3C HTML5.1 планируется в конце 2016 года. Стандарт WHATWG HTML является живым (Living Standard), то есть изменения в него вносятся постоянно."},
          {"someText" : "HTML5 вводит несколько новых элементов и атрибутов, которые отражают типичное использование разметки на современных веб-сайтах. Некоторые из них — семантические замены для использования универсальных блочных (<div>) и строчных (<span>) элементов, например, <nav> (блок навигации по сайту), <footer> (обычно относится к нижней части страницы или последней строке HTML кода) или <audio> и <video> вместо <object>. Некоторые устаревшие элементы, которые можно было использовать в HTML 4.01, были исключены, включая чисто оформительские элементы, такие как <font> и <center>, чьи эффекты выполняются с помощью каскадных таблиц стилей. Также в поведении веб снова заострено внимание на важности скриптов DOM (например, Javascript)."},
          {"someText" : "Синтаксис HTML5 больше не базируется на SGML, несмотря на подобие его разметки. Однако он был разработан обратно совместимым с обычным парсингом более старых версий HTML. В HTML5 применяется новая вводная строка, которая выглядит как объявление типа документа в SGML, <!DOCTYPE html>, запускающая соответствующий стандартам режим рендеринга. С 5 января 2009 года HTML5 также включает в себя Web Forms 2.0, ранее бывшие отдельной спецификацией WHATWG."},
          {"someText" : "To be continued, thank you ^_^"}
        ]
    },
    {
        "Title": "CSS3",
        "Src": "https://www.javatpoint.com/csspages/images/css-tutorial.png",
        "Description": [
          {"someText" : "CSS (англ. Cascading Style Sheets), или каскадные таблицы стилей, используются для описания визуального стиля и представления документа, чаще всего веб-сайта. Одной из целей CSS является отделение представления документа от структуры и содержания (хотя можно вставлять CSS внутри структуры), и это W3C-рекомендация. Отделение стиля от структуры и содержания увеличивает ремонтопригодность для автора(ов) документа, а также доступность для аудитории. CSS обычно применяется к HTML, XHTML и XML документам, хотя вполне возможно, хотя и редко, применять его к другим видам документов."},
          {"someText" : "CSS является одним из способов описания стилей (цвет, шрифт, расположение и другие презентационные аспекты документа). В одном файле CSS можно описать общий стиль, который будет применён ко многим HTML, XHTML, и XML-документам (которые описывают содержание и структуру элементов каждого документа). Обычно конкретный элемент в файле XHTML имеет каскад стилевых правил, которые могут быть применены к нему. Стиль с наивысшим приоритетом применяется к каждому элементу."},
          {"someText" : "CSS используется создателями веб-страниц для задания цветов, шрифтов, расположения отдельных блоков и других аспектов представления внешнего вида этих веб-страниц. Основной целью разработки CSS являлось разделение описания логической структуры веб-страницы (которое производится с помощью HTML или других языков разметки) от описания внешнего вида этой веб-страницы (которое теперь производится с помощью формального языка CSS). Такое разделение может увеличить доступность документа, предоставить большую гибкость и возможность управления его представлением, а также уменьшить сложность и повторяемость в структурном содержимом. Кроме того, CSS позволяет представлять один и тот же документ в различных стилях или методах вывода, таких как экранное представление, печатное представление, чтение голосом (специальным голосовым браузером или программой чтения с экрана), или при выводе устройствами, использующими шрифт Брайля."},
          {"someText" : "To be continued, thank you ^_^"}
        ]
    },
    {
        "Title": "JavaScript",
        "Src": "http://alexdev.ru/wp-content/uploads/2015/06/JS-logo.png",
        "Description": [
          {"someText" : "JavaScript — мультипарадигменный язык программирования. Поддерживает объектно-ориентированный, императивный и функциональный стили. Является реализацией языка ECMAScript (стандарт ECMA-262)."},
          {"someText" : "JavaScript обычно используется как встраиваемый язык для программного доступа к объектам приложений. Наиболее широкое применение находит в браузерах как язык сценариев для придания интерактивности веб-страницам."},
          {"someText" : "Основные архитектурные черты: динамическая типизация, слабая типизация, автоматическое управление памятью, прототипное программирование, функции как объекты первого класса. На JavaScript оказали влияние многие языки, при разработке была цель сделать язык похожим на Java, но при этом лёгким для использования непрограммистами. Языком JavaScript не владеет какая-либо компания или организация, что отличает его от ряда языков программирования, используемых в веб-разработке."},
          {"someText" : "Название «JavaScript» является зарегистрированным товарным знаком компании Oracle Corporation."},
          {"someText" : "To be continued, thank you ^_^"}
        ]
    },
    {
        "Title": "ReactJS",
        "Src": "http://reactjshire.com/img/reactjs.png",
        "Description": [
          {"someText" : "React.js, здебільшого називають React — відкрита JavaScript бібліотека для створення інтерфейсів користувача, яка покликана вирішувати проблеми часткового оновлення вмісту веб-сторінки, з якими стикаються в розробці односторінкових застосунків. Розробляється Facebook, Instagram і спільнотою індивідуальних розробників."},
          {"someText" : "React дозволяє розробникам створювати великі веб-застосунки, які використовують дані, котрі змінюються з часом, без перезавантаження сторінки. Його мета полягає в тому, щоб бути швидким, простим, масштабованим. React обробляє тільки користувацький інтерфейс у застосунках. Це відповідає видові у шаблоні модель-вид-контролер (MVC), і може бути використане у поєднанні з іншими JavaScript бібліотеками або в великих фреймворках MVC, таких як AngularJS. Він також може бути використаний з React на основі надбудов, щоб піклуватися про частини без користувацького інтерфейсу побудови веб-застосунків.В даний час React використовують Khan Academy, Netflix, Yahoo, Airbnb, Sony, Atlassian та інші."},
          {"someText" : "Фреймворк створено Джорданом Волком (Jordan Walke), програмістом з Facebook. Автор працював над проектом під впливом XHP, фреймворку HTML для PHP.[12] 2011-го року реліз з'явився у новинах Facebook, за рік — у блозі Instagram. Також фреймворк був представлений як проект з відкритим початковим кодом на конференції розробників JSConf US, що проходила у Сполучених Штатах у травні 2013 року. На конференції React.js Conf, влаштовану Фейсбуком у березні 2015-го, проект було представлено як відкрите програмне забезпечення."},
          {"someText" : "To be continued, thank you ^_^"}
        ]
    },
    {
        "Title": "Vue.JS",
        "Src": "https://avatars3.githubusercontent.com/u/6128107?s=200&v=4",
        "Description": [
          {"someText" : "Vue — это прогрессивный фреймворк для создания пользовательских интерфейсов. В отличие от фреймворков-монолитов, Vue создан пригодным для постепенного внедрения. Его ядро в первую очередь решает задачи уровня представления (view), что упрощает интеграцию с другими библиотеками и существующими проектами. С другой стороны, Vue полностью подходит и для создания сложных одностраничных приложений (SPA, Single-Page Applications), если использовать его совместно с современными инструментами и дополнительными библиотеками."},
          {"someText" : "В основе любой популярной библиотеки лежит идея, которая отличает её от остальных. В Angular — это директивы и two-way data-binding, в React — компонентный подход, Virtual DOM, однонаправленный поток данных, SSR; Polymer приносит будущие web components в современные браузеры. Некоторые библиотеки делают упор на быстродействие, пытаясь выкинуть из популярных всю ненужную шелуху (Inferno, Preact), другие, по мнению их авторов, впитывают в себя самое лучшее из разных подходов. Vue.js как раз из последних. Досконально изучать каждый не имеет смысла (и не хватит времени), но понимание идей, лежащих в основе популярных, поможет вам выбрать подходящий инструмент под ваши задачи."},
          {"someText" : "На что похож Vue при первом знакомстве? Те, кто использовал React и Angular, сразу увидят много общего — компонентный подход, lifecycle методы, unidirectional data-flow c передачей props вниз по дереву, virtual DOM, директивы, vuex (redux-like), vue router. Такая схожесть, при наличии опыта работы с одной из библиотек, позволит вам быстро понять, почему многие выбирают именно Vue."},
          {"someText" : "To be continued, thank you ^_^"}
        ]
    },
    {
        "Title": "Angular",
        "Src": "https://assets.devcon.ph/uploads/event/logo/angularjs-code-camp/opengraph_Angular_logo.png",
        "Description": [
          {"someText" : "This section is empty, dont look"},
          {"someText" : "We have not learned this yet"},
          {"someText" : "I told you - do not look"},
          {"someText" : "You do not trust me?"},
          {"someText" : "Stop doing it!"}
        ]
    }
  ]
}